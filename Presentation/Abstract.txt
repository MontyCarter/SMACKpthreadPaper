---
Verification of programs using formal methods has long been a promising area whose practical adoption has gone unrealized. With recent advances in computing performance and verification algorithms practical adoption is becoming a reality, and it has become necessary to create tools that address the use cases where formal verification will be most advantageous.  One such use case is the verification of concurrent programs.  SMACK is an actively developed front-end for a popular back-end program verification engine called Corral.  Although Corral has basic primitives to support concurrency, SMACK currently does not.

In this talk, I focus on my research efforts towards modelling concurrent programs within the context of bounded software verification.  I will begin by introducing my implementation of pthread library support for SMACK, and highlight its experimental success at correctly modeling the behavior of the pthread library.  Finally, using the pthread extension as an example, I will discuss the more general constructs and mechanisms needed to model concurrency.
---
Verification of programs using formal methods has long been a promising area whose practical adoption has gone unrealized. With recent advances in computing performance and verification algorithms practical adoption is becoming a reality, and it has become necessary to create tools that address the use cases where formal verification will be most advantageous.  One such use case is the verification of concurrent programs.  SMACK is an actively developed front-end for a popular back-end program verification engine called Corral.  Although Corral has basic primitives to support concurrency, SMACK currently does not.

In this talk, I focus on my research efforts towards modelling concurrent programs within the context of bounded software verification.  I will describe my extension of SMACK to support the pthread library, and highlight its accuracy through experimental results.  Finally, using the pthread extension as an example, I will discuss the more general constructs and mechanisms needed to model concurrency.
